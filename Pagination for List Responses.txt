Explanation:
Pagination is a technique used in APIs to split large lists into smaller, manageable chunks.
For example, if there are 1,000 students in the database, it would be inefficient and slow to return all of them at once. 
Instead, you can return only a limited number of students at a time (e.g., 10 or 20).

Why Pagination is Important:

It improves performance, as it avoids overwhelming the client and the server.
It provides a better user experience, allowing users to load and view data in small chunks.
Reduces memory usage on both the client and server sides.

How to Implement:
You can achieve pagination by using query parameters such as skip and limit to specify how many records to skip and how many to return.

Example:

1. Modify your GET /students/ endpoint to support pagination:

from fastapi import Query

@app.get("/students/")
def get_students(skip: int = 0, limit: int = 10, db: Session = Depends(get_db)):
    students = db.query(Student).offset(skip).limit(limit).all()
    return students

Parameters:

skip: The number of records to skip (e.g., for pagination, it tells the API where to start fetching records).
limit: The number of records to return in a single response (e.g., how many students to show per page).

In Action:
Example request:
        GET /students/?skip=0&limit=10

This fetches the first 10 students.

Another request to fetch the next 10:

GET /students/?skip=10&limit=10


Response (for 10 students):

[
  { "id": 1, "name": "John Doe", "email": "john@example.com" },
  { "id": 2, "name": "Jane Smith", "email": "jane@example.com" },
  ...
]

Pagination makes your API scalable and efficient, especially when dealing with large data sets.
