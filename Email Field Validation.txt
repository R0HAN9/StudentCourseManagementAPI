Explanation:
When creating a new student, itâ€™s crucial to ensure that the email provided by the user is in a valid format (e.g., example@example.com). 
This helps to avoid invalid data in the database, and ensures that the email meets certain criteria for further processing (such as sending notifications or verifications).

How Pydantic Helps:
Pydantic, which is used by FastAPI for data validation, provides a special data type called EmailStr for this purpose. 
It checks if the string is a valid email format (e.g., abc@example.com).

Example:

from pydantic import BaseModel, EmailStr

class StudentCreate(BaseModel):
    name: str
    email: EmailStr  # Ensures email is in a valid format

# FastAPI will automatically reject invalid emails with a clear error message.


In Action:

If you try to create a student with an invalid email like invalidemail.com, FastAPI will return:

{
  "detail": [
    {
      "loc": ["body", "email"],
      "msg": "value is not a valid email address",
      "type": "value_error.email"
    }
  ]
}
This error ensures that only valid emails are stored in your database, saving you from issues down the line.
